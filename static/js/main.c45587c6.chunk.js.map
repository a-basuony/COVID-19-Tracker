{"version":3,"sources":["public/logo.png","util.js","components/InfoBox.js","components/Table.js","components/Map.js","components/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["sortTable","data","sort","a","b","cases","prettyPrint","num","abbreviation","delta","numeral","format","Math","abs","casesTypeColors","hex","lighter","multiplier","active","recovered","deaths","vaccinations","InfoBox","title","total","value","props","Card","onClick","className","CardContent","Typography","color","Table","countries","map","country","ChangeView","center","zoom","useMap","flyTo","animate","duration","easeLinearity","getRadius","casesType","vaxData","sqrt","isNaN","population","Map","ref","activeCaseType","scrollWheelZoom","TileLayer","attribution","url","Circle","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Popup","style","backgroundImage","flag","forwardRef","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","timeline","chartData","date","number","newDataPoint","x","y","push","LineGraph","useState","setData","countryName","setCountryName","useEffect","caseType","code","toLowerCase","fetch","then","response","ok","json","fetchData","length","datasets","backgroundColor","borderColor","App","worldCenter","setCountries","selectedCountry","setSelectedCountry","mapCountries","setmapCountries","countryData","setCountryData","vaccineData","setVaccineData","mapVaxData","setMapVaxData","setactiveCaseType","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","yesterdayFlag","setYesterdayFlag","mapRef","useRef","api_url","vaccine_url","getCountryInfo","name","iso2","getVaxInfo","vax_data","Object","vaccine_parameters","todayCases","onCountryChange","e","countryCode","target","src","logo","alt","FormControl","Select","variant","onChange","MenuItem","Alert","severity","icon","fontSize","moment","subtract","fromNow","updated","todayRecovered","todayDeaths","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c45587c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ae9f1d32.png\";","import numeral from \"numeral\";\n\nexport const sortTable = (data) => {\n  let sortedData = [...data];\n  return sortedData.sort((a, b) => {\n    return a.cases > b.cases ? -1 : 1;\n  });\n};\n\nexport const prettyPrint = (num, abbreviation, delta) => {\n  return numeral(num).format(\n    (delta && \"+\") +\n      \"0,0\" +\n      (abbreviation && `${Math.abs(num) > 1000 ? \".\" : \"\"}0a`)\n  );\n};\n\nexport const prettyPercent = (num) => {\n  return numeral(num).format(\"0.0%\");\n};\n\nexport const casesTypeColors = {\n  cases: {\n    hex: \"#FB4443\",\n    lighter: \"#F5AAA7\",\n    multiplier: 150,\n  },\n\n  active: {\n    hex: \"#E67300\",\n    lighter: \"#EDBD8C\",\n    multiplier: 350,\n  },\n\n  recovered: {\n    hex: \"#7DD71D\",\n    lighter: \"#C3E598\",\n    multiplier: 150,\n  },\n\n  deaths: {\n    hex: \"#CC1034\",\n    lighter: \"#E395A1\",\n    multiplier: 1000,\n  },\n\n  vaccinations: {\n    hex: \"#009C9D\",\n    lighter: \"#00D8D8\",\n    multiplier: 200000,\n  },\n};\n","import React from \"react\";\nimport \"../css/Infobox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { prettyPrint } from \"../util\";\n\nfunction InfoBox({ title, cases, total, active, value, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox  ${active && \"infoBox--selected\"} ${\n        \"infoBox--\" + value\n      }`}\n    >\n      <CardContent>\n        {/* Content title */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        {/* New today */}\n        <h2 className={`infoBox__cases ${\"infoBox__cases--\" + value}`}>\n          {cases === null ? \"Data not updated\" : prettyPrint(cases, true, true)}\n        </h2>\n\n        {/* Total */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {prettyPrint(total, true)} total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport { prettyPrint } from \"../util\";\nimport \"../css/Table.css\";\n// import { Table as MaterialTable } from \"@material-ui/core\";\n\nfunction Table({ countries, ...props }) {\n  return (\n    <div className={props.className}>\n      <table>\n        <tbody>\n          {countries.map((country) => (\n            <tr key={country.country}>\n              <td>{country.country}</td>\n              <td>\n                <strong>{prettyPrint(country.cases)}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { forwardRef } from \"react\";\nimport { prettyPrint, prettyPercent, casesTypeColors } from \"../util\";\nimport {\n  MapContainer as LeafletMap,\n  TileLayer,\n  useMap,\n  Circle,\n  Popup,\n} from \"react-leaflet\";\nimport \"../css/Map.css\";\n\nfunction ChangeView({ center, zoom }) {\n  const map = useMap();\n\n  map.flyTo(center, zoom, {\n    animate: true,\n    duration: 1.25,\n    easeLinearity: 0.25,\n  });\n  return null;\n}\n\nconst mapOverlay = (data, vaxData, casesType) => {\n  //   const normalizedTotal = Math.sqrt(\n  //     data.reduce((a, b) => a + Math.pow(b[casesType], 2), 0)\n  //   );\n\n  return data.map((country) => (\n    <Circle\n      key={country.country}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={getRadius(casesType, country, vaxData)}\n    >\n      <Popup className=\"info\">\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-cases\">\n            Total cases: {prettyPrint(country.cases)}\n          </div>\n          <div className=\"info-active\">\n            Active cases: {prettyPrint(country.active)}\n          </div>\n          <div className=\"info-recovered\">\n            Recoveries: {prettyPrint(country.recovered)}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {prettyPrint(country.deaths)}\n          </div>\n          <div className=\"info-vaccinations\">\n            Vaccinated:{\" \"}\n            {prettyPercent(vaxData?.[country.country] / 2 / country.population)}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n};\n\nfunction getRadius(casesType, country, vaxData) {\n  if (casesType !== \"vaccinations\")\n    return (\n      Math.sqrt(Math.abs(country[casesType]) + 1) *\n      casesTypeColors[casesType].multiplier\n    );\n  else if (\n    isNaN(\n      Math.sqrt(vaxData[country.country] / country.population) *\n        casesTypeColors[casesType].multiplier\n    )\n  )\n    return 1;\n  else\n    return (\n      Math.sqrt(vaxData[country.country] / country.population) *\n      casesTypeColors[casesType].multiplier\n    );\n}\n\nfunction Map(\n  { countries, vaccinations, activeCaseType, center, zoom, ...props },\n  ref\n) {\n  return (\n    <div className={props.className} ref={ref}>\n      <LeafletMap center={center} zoom={zoom} scrollWheelZoom={false}>\n        <ChangeView center={center} zoom={zoom} />\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {mapOverlay(countries, vaccinations, activeCaseType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default forwardRef(Map);\n","import React, { useState, useEffect } from \"react\";\nimport { casesTypeColors } from \"../util\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: true,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\", country = \"all\") => {\n  let chartData = [];\n  let lastDataPoint;\n  let timeline;\n  if (casesType === \"vaccinations\")\n    timeline = country === \"all\" ? data : data.timeline;\n  else if (country === \"all\") timeline = data?.cases;\n  else timeline = data?.timeline?.cases;\n\n  for (let date in timeline) {\n    let number = timeline[date];\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: Math.abs(number - lastDataPoint),\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = number;\n  }\n\n  return chartData;\n};\n\nfunction LineGraph({ casesType, country, ...props }) {\n  const [data, setData] = useState({});\n  const [countryName, setCountryName] = useState(\"worldwide\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let caseType = casesType;\n      let code = country === \"worldwide\" ? \"all\" : country.toLowerCase();\n      await fetch(\n        casesType === \"vaccinations\"\n          ? `https://disease.sh/v3/covid-19/vaccine/coverage${\n              code === \"all\" ? \"\" : `/countries/${code}`\n            }?lastdays=120`\n          : `https://disease.sh/v3/covid-19/historical/${code}?lastdays=120`\n      )\n        .then((response) => {\n          if (response.ok) return response.json();\n          else return null;\n        })\n        .then((data) => {\n          if (data !== null) {\n            if (country !== \"worldwide\") setCountryName(data.country);\n            else setCountryName(\"worldwide\");\n            let chartData = buildChartData(data, caseType, code);\n            setData(chartData);\n          }\n        });\n    };\n\n    fetchData();\n  }, [casesType, country]);\n\n  return (\n    <div className={props.className}>\n      <h3>\n        {countryName} New{\" \"}\n        {casesType === \"active\" || casesType === \"recovered\"\n          ? \"Cases\"\n          : casesType}\n      </h3>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: `${casesTypeColors[casesType].lighter}`,\n                borderColor: `${casesTypeColors[casesType].hex}`,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import \"./css/App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport logo from \"./public/logo.png\";\nimport moment from \"moment\";\n\nimport { useState, useEffect, useRef } from \"react\";\n\nimport {\n  Card,\n  FormControl,\n  Select,\n  MenuItem,\n  CardContent,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport InfoBox from \"./components/InfoBox\";\nimport Table from \"./components/Table\";\nimport Map from \"./components/Map\";\nimport LineGraph from \"./components/LineGraph\";\nimport { sortTable } from \"./util\";\n\nfunction App() {\n  const worldCenter = [34.80746, 15.4796];\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [mapCountries, setmapCountries] = useState([]);\n  const [countryData, setCountryData] = useState({});\n  const [vaccineData, setVaccineData] = useState({});\n  const [mapVaxData, setMapVaxData] = useState();\n\n  const [activeCaseType, setactiveCaseType] = useState(\"cases\");\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState(worldCenter);\n  const [mapZoom, setMapZoom] = useState(2);\n  const [yesterdayFlag, setYesterdayFlag] = useState(false);\n\n  const mapRef = useRef();\n\n  const api_url = \"https://www.disease.sh/v3/covid-19/\";\n  const vaccine_url = api_url + \"vaccine/coverage/\";\n\n  useEffect(() => {\n    const getCountryInfo = async () => {\n      await fetch(api_url + \"countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          setCountries(countries);\n          setmapCountries(data);\n          setTableData(sortTable(data));\n        });\n    };\n\n    const getVaxInfo = async () => {\n      await fetch(vaccine_url + \"countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          let vax_data = {};\n          for (let country of data) {\n            vax_data[country.country] = Object.values(country.timeline)[0];\n          }\n          setMapVaxData(vax_data);\n        });\n    };\n\n    getCountryInfo();\n    getVaxInfo();\n  }, [vaccine_url]);\n\n  useEffect(() => {\n    const url =\n      selectedCountry === \"worldwide\"\n        ? api_url + \"all\"\n        : api_url + `countries/${selectedCountry}?allowNull=true`;\n\n    const vaccine_parameters =\n      selectedCountry === \"worldwide\"\n        ? vaccine_url + \"?lastdays=3\"\n        : vaccine_url + `countries/${selectedCountry}?lastdays=3`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.todayCases === null) {\n          setYesterdayFlag(true);\n          fetch(url + \"&yesterday=true\")\n            .then((response) => response.json())\n            .then((data) => setCountryData(data));\n        } else {\n          setCountryData(data);\n          setYesterdayFlag(false);\n        }\n        setMapCenter(\n          selectedCountry === \"worldwide\"\n            ? worldCenter\n            : [data.countryInfo.lat, data.countryInfo.long]\n        );\n      });\n\n    fetch(vaccine_parameters)\n      .then((response) => response.json())\n      .then((data) => {\n        if (selectedCountry !== \"worldwide\") data = data.timeline;\n        setVaccineData(data);\n      });\n\n    // eslint-disable-next-line\n  }, [selectedCountry]);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setSelectedCountry(countryCode);\n    setMapZoom(countryCode === \"worldwide\" ? 2 : 4);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <img className=\"app__header__logo\" src={logo} alt=\"logo\" />\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={selectedCountry}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.value} key={country.name}>\n                    {country.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__lastUpdated\">\n          <Alert\n            className={\n              \"app__lastUpdated__alert\" +\n              (yesterdayFlag ? \"--warning\" : \"--info\")\n            }\n            severity={yesterdayFlag ? \"warning\" : \"info\"}\n            icon={<AccessTimeIcon fontSize=\"inherit\" />}\n          >\n            {\"Figures updated \" +\n              (yesterdayFlag\n                ? moment().subtract(1, \"days\").fromNow()\n                : moment(countryData.updated).fromNow())}\n          </Alert>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            active={activeCaseType === \"cases\"}\n            title=\"Total Cases\"\n            value=\"cases\"\n            cases={countryData.todayCases}\n            total={countryData.cases}\n            onClick={(e) => setactiveCaseType(\"cases\")}\n          />\n          <InfoBox\n            active={activeCaseType === \"active\"}\n            title=\"Active Cases\"\n            value=\"active\"\n            cases={\n              countryData.todayCases === null\n                ? null\n                : countryData.todayCases - countryData.todayRecovered\n            }\n            total={countryData.active}\n            onClick={(e) => setactiveCaseType(\"active\")}\n          />\n          <InfoBox\n            active={activeCaseType === \"recovered\"}\n            title=\"Recovered\"\n            value=\"recovered\"\n            cases={countryData.todayRecovered}\n            total={countryData.recovered}\n            onClick={(e) => setactiveCaseType(\"recovered\")}\n          />\n          <InfoBox\n            active={activeCaseType === \"deaths\"}\n            title=\"Deaths\"\n            value=\"deaths\"\n            cases={\n              countryData.todayCases === null\n                ? null\n                : countryData.todayDeaths === null\n                ? 0\n                : countryData.todayDeaths\n            }\n            total={countryData.deaths}\n            onClick={(e) => setactiveCaseType(\"deaths\")}\n          />\n          <InfoBox\n            active={activeCaseType === \"vaccinations\"}\n            title=\"Vaccinations\"\n            value=\"vaccinations\"\n            cases={Math.abs(\n              Object.values(vaccineData)[0] - Object.values(vaccineData)[1]\n            )}\n            total={Object.values(vaccineData)[0]}\n            onClick={(e) => setactiveCaseType(\"vaccinations\")}\n          />\n        </div>\n\n        <Map\n          className=\"app__map\"\n          countries={mapCountries}\n          vaccinations={mapVaxData}\n          activeCaseType={activeCaseType}\n          center={mapCenter}\n          zoom={mapZoom}\n          ref={mapRef}\n        />\n      </div>\n\n      <div className=\"app__right\">\n        <Card>\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table className=\"app__table\" countries={tableData} />\n            <LineGraph\n              className=\"app__graph\"\n              casesType={\n                activeCaseType === \"active\" || activeCaseType === \"recovered\"\n                  ? \"cases\"\n                  : activeCaseType\n              }\n              country={selectedCountry}\n            />\n          </CardContent>\n        </Card>\n\n        <p className=\"app__king\">\n          Made with  {\" \"}\n          <a\n            href=\"https://a-basuony.github.io/my-portfolio/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Ahmed Basuony\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}